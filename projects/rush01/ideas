int ft_checktop(int hints[16], int grid[4][4], int col)
{
    int visible_count = 0;
    int max_height = 0;
    int hint = hints[col];
    int row = 0;
    int filled_cells = 0;

    while (row < 4)
    {
        if (grid[row][col] != 0)
        {
            filled_cells++;
            if (grid[row][col] > max_height)
            {
                visible_count++;
                max_height = grid[row][col];
            }
        }
        row++;
    }

    if (filled_cells == 4)
        return (visible_count == hint);
    return (visible_count <= hint);
}X

int ft_checkhints(int hints[16], int grid[4][4], int pos, int num)
{
    int row;
    int col;
    row = pos / 4;
    col = pos % 4;
    
    grid[row][col] = num;  // Temporarily place the number
    
    // Only check if the row or column is full
    if (ft_row_is_full(grid, row))
    {
        if (!(ft_checkleft(hints, grid, row) && ft_checkright(hints, grid, row)))
        {
            grid[row][col] = 0;  // Remove the number before returning
            return 0;
        }
    }
    
    if (ft_col_is_full(grid, col))
    {
        if (!(ft_checktop(hints, grid, col) && ft_checkbottom(hints, grid, col)))
        {
            grid[row][col] = 0;  // Remove the number before returning
            return 0;
        }
    }
    
    grid[row][col] = 0;  // Remove the number
    return 1;
}
